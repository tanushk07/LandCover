dirs:
  data_dir: data
  train_dir: train
  test_dir: test
  image_dir: images
  mask_dir: masks
  model_dir: models
  output_dir: output
  pred_mask_dir: predicted_masks
  pred_plot_dir: prediction_plots
  log_dir: logs
vars:
  train_log_name: train.log
  test_log_name: test.log
  log_level: 'DEBUG'
  file_type: '.tif'  # extension of the images and masks present in the dataset
  patch_size: 512  # set best value according to dataset image dimensions
  discard_rate: 0.95  # if background class occupies more than the discard rate of the image, discard the image and mask; value 0 to discard nothing; edit as per use-case and the classes present in the dataset
  batch_size: 16  # fine-tune model training
  model_arch: 'Unet'  # choose from the architectures lsited here: https://smp.readthedocs.io/en/latest/models.html
  model_name: trained_landcover_unet_efficientnet-b0_epochs18_patch512_batch16.pth  # the model to load while testing
  encoder: 'efficientnet-b0'  # choose from the pre-trained encoders listed here: https://smp.readthedocs.io/en/latest/encoders_timm.html
  encoder_weights: 'imagenet'
  activation: 'softmax2d'  # sigmoid for binary classification, softmax2d for multi-class classification
  optimizer_choice: 'Adam'  # choose from the optimizers lsited here: https://pytorch.org/docs/stable/optim.html#module-torch.optim
  init_lr: 0.0003  # initial learning rate
  reduce_lr_by_factor: 0.5   # by what factor to reduce learning rate when plateau hits - choose 0.5 for gradual decrease, 0.1 for strong reduction
  patience_epochs_before_reducing_lr: 5   # how many epochs to wait when plateaue hits before learning rate is reduced
  lr_reduce_threshold: 0.0001   # default value, defines the minimum relative change in the monitored metric to be considered an improvement, i.e. getting out of the plateau
  minimum_lr: 0   # the lowest learning rate allowed
  epochs: 20  # fine-tune model training
  device: 'cpu'  # 'cpu' or 'cuda' - edit according to your device
  all_classes: ['background', 'building', 'woodland', 'water', 'road']  # all the classes present in the dataset
  train_classes: ['background', 'building', 'woodland', 'water']  # not training on 'road' class (need more fine-tuning)
  test_classes: ['background', 'building', 'water']  # the class prompt - edit according to what you want to have in the output masks